# To add a new cell, type '# %%'
# To add a new markdown cell, type '# %% [markdown]'
# %% [markdown]
# <a href="https://colab.research.google.com/github/yukinaga/lecture_pytorch/blob/master/python_basic/01_python_basic_1.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>
# %% [markdown]
# # Pythonの基礎1
# 本講座で必要な範囲の、Pythonの文法を解説します。  
# Pythonの文法についてさらに詳しく知りたい方は、他のウェブサイトや書籍などを参考にしてください。
# %% [markdown]
# ## ●変数と型
# Pythonでは、変数を使用する前に何らかの記述をする必要ありません。  
# 以下のように、値を代入するところから記述を始めることができます。  

# %%
a = 123

# %% [markdown]
# Pythonは、変数に対して型の明示は不要です。  
# 例えば、整数型の変数に文字列を代入すれば、それは文字列型の変数になります。  
# Pythonの主な型を以下に示します。

# %%
a = 123             # 整数型（int）
b = 123.456         # 浮動小数点型（float）
c = "Hello World!"  # 文字列型（str）
d = True            # 論理型（bool）
e = [1, 2, 3]       # リスト型（list）

# %% [markdown]
# \#はコメントを表し、同じ行のそれ以降はコードとして認識されることはありません。
# 
# また、bool型の値は数値として扱うことができます。  
# `True`は1で`False`は0として扱われます。  
# 以下の例では、`True`と`False`を足していますが、結果は0と1の和の1になります。

# %%
a = True; b = False
print(a+b)

# %% [markdown]
# Pythonでは、上記のように`;`（セミコロン）で区切ることで、一行内に複数の処理を書くことができます。 
# 
# また、浮動小数点型の値は指数表記が可能です。以下のように`e`を用いて小数を表記することができます。

# %%
1.2e5   # 1.2x10の5乗 120000
1.2e-5  # 1.2x10の-5乗 0.000012

# %% [markdown]
# ## ●演算子
# Pythonの演算子を紹介します。

# %%
a = 3; b = 4

c = a + b               # 足し算
print(c) 

d = a < b               # 比較（小さいかどうか）
print(d)

e = 3 < 4 and 4 < 5     # 論理和
print(e)

# %% [markdown]
# 主な演算子をまとめると以下の通りです。
# 
# ||||
# |:-:|:-:|:--|
# |算術演算子| \+ | 足し算 |
# ||- | 引き算 |
# || * | かける |
# || / | 割る（小数） |
# || // | 割る（整数） |
# || % | 余り |
# || ** | べき乗 |
# |比較演算子| < | 小さい |
# || > | 大きい |
# || <= | 以上 |
# || >= | 以下 |
# || == | 等しい |
# || != | 等しくない |
# |論理演算子| and | 両者を満たす |
# || or | どちらか片方を満たす |
# || not | 満たさない |
# ||||
# %% [markdown]
# ## ●リスト
# リストは、複数の値をまとめて扱う場合に使用します。  
# リストは全体を`[]`で囲み、各要素は`,`で区切ります。  
# Pythonのリストはどのような型の値でも格納することができ、リストの中にリストを格納することもできます。  
# リストの各要素へのアクセスはインデックスを使い、要素の追加や入れ替えなどが可能です。  

# %%
a = [1, 2, 3, 4, 5]     # リストの作成

b = a[2]                # 3番目の要素を取得
print(b)

a.append(6)             # 末尾に要素を追加する
print(a)

a[2] = 7                # 要素の入れ替え
print(a)

# %% [markdown]
# ## ●タプル
# タプルはリストと同じく複数の値をまとめて扱いたいときに利用しますが、要素の追加や削除、入れ替えなどはできません。  
# タプルは全体を`()`で囲み、各要素は`,`で区切ります。  
# 要素を変更する予定が無い場合は、リストよりもタプルを使用する方がベターです。  

# %%
a = (1, 2, 3, 4, 5)     # タプルの作成

b = a[2]                # 3番目の要素を取得
print(b)

# %% [markdown]
# 要素が1つだけのタプルは、以下のように要素の直後に`,`が必要です。

# %%
(3,)

# %% [markdown]
# リストやタプルの要素は、以下のようにしてまとめて変数に代入することが可能です。

# %%
a = [1, 2, 3]
a1, a2, a3 = a
print(a1, a2, a3)

b = (4, 5, 6)
b1, b2, b3 = b
print(b1, b2, b3) 

# %% [markdown]
# ## ●辞書
# 辞書は、キーと値の組合せでデータを格納します。　  
# 以下は、Pythonの辞書を扱う例です。  
# 文字列をキーとして辞書を作成し、値の取得や入れ替え、要素の追加を行なっています。

# %%
a = {"Artificial":1, "Intelligence":2}  # 辞書の作成
print(a["Artificial"])   # "Apple"のキーを持つ値を取得

a["Intelligence"] = 7  # 要素の入れ替え
print(a["Intelligence"])

a["ML"] = 3  # 要素の追加
print(a)

# %% [markdown]
# ## ●セット  
# セットはリストと似ていますが、重複した値の要素をもつことができません。  
# タプルと異なり、要素の追加や削除が可能です。

# %%
a = [1, 1, 2, 3, 4, 4, 5, 5, 5]  # リスト
print(a)

b = set(a)  # セットに変換
print(b)

b.add(6)  # 値を追加
print(b)

b.remove(3)  # 値を削除
print(b)

# %% [markdown]
# ## ●if文  
# 分岐にはif文を用います。  
# ifの条件が満たされていなければ、elifの条件が上から順番に判定されます。  
# これらの条件がすべて満たされていなければ、else内の処理が実行されます。  
# 
# 多くのプログラミング言語では分岐や関数のブロックを表すために{ }を使用しますが、Pythonではブロックの範囲を行頭のインデントで表します。  
# すなわち、インデントしていない行が出現したら、その直前にブロックは終了していることになります。  
# インデントには、半角スペース4つを用いることが多いです。

# %%
a = 7
if a < 12:
    print("Good morning!")
elif a < 17:
    print("Good afternoon!")
elif a < 21:
    print("Good evening!")
else:
    print("Good night!")

# %% [markdown]
# ## ●for文
# 指定した回数ループするためにはfor文を用います。  
# ループする範囲を指定するためには、リストやrangeをin演算子とともに用います。  
# 
# rangeの使い方は次のとおりです。[ ]で囲まれた引数は省略可能です。
# 
# ```
# range([開始番号,] 終了番号［, ステップ数])
# ```
# 
# 例えばrange(3)は、0から2までの範囲になります。

# %%
for a in [4, 7, 10]:    # リストを使ったループ
    print(a)
    
for a in range(3):      # rangeを使ったループ
    print(a)

# %% [markdown]
# ## ●while文
# ある条件を満たしている間ループするためには、while文を用います。

# %%
a = 0
while a < 3:  # aが3より小さい間ループ
    print(a)
    a += 1

# %% [markdown]
# ## ●内包表記
# 内容表記は、リストの要素を操作した上で、新しいリストを作成するための記法です。  
# 通常、そのような処理はforやwhileによるループを使用しますが、内包表記を用いると、簡潔に記述することができます。  
# 内包表記は、以下の形式で記述します。  
# 
# ```
# 新たなリスト = [ 要素への処理 for 要素 in リスト]  
# ```
# 
# リスト内の要素を1つ1つ取り出して、要素への処理を実行した上で新しいリストを作成します。

# %%
a = [1, 2, 3, 4, 5, 6]
b = [c*3+1 for c in a]    # aの要素を3倍して1を足し新たなリストを作る
print(b)


